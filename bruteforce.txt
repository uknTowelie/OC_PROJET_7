ALGORITHME bruteforce
VARIABLES
	all_combination : Tableau
	list_action : Tableau
	combinations : Tableau
	resultat : Tableau
	index : Entier
	idex_comb : Entier
DEBUT
	list_action <- initAction()
	
	POUR index ALLANT_DE 1 A 20 {PAR_PAS_DE 1}
		comb <- Combination(list_action, index)
		POUR index_comb ALLANT_DE 0 A longueur(comb)
			AJOUTER comb[index_comb] A all_combination
		FIN_POUR
 	FIN_POUR
	
	all_combination <- getViable(all_combination)
	resultat <- getBestSet(all_combination)
FIN

FONCTION combination(tab, nombre_max)
VARIABLE
	index : Entier
	index_comb : Entier
	resultat : Tableau
	res_temp : Tableau
DEBUT
	SI nombre_max = 0 ALORS
		RETOURNE
	SINON
		POUR index ALLANT_DE 0 A longueur(tab) - nombre_max + 1
			
			res_temp <- combination(tab[index+1:], size - 1)
			POUR index_comb ALLANT_DE 0 A longueur(res_temp)
				RETOURNE [tab[index]] + res_temp
			FIN_POUR
		FIN_POUR
	FIN_SI
FIN

FONCTION getViable(list_combination)
VARIABLES
	index : ENTIER
	index_combination : ENTIER
	somme : REEL
	profit : REEL
	action : Action
	combination : TABLEAU
	condition : BOOLEAN
	tableau_temp : TABLEAU
	resultat : TABLEAU
DEBUT
	POUR index ALLANT_DE 0 A longueur(list_combination) {PAR_PAS_DE 1}
		combination <- list_combination[index]
		tableau_temp <- []
		somme <- 0
		profit <- 0
		condition <- VRAI
		POUR index_combination ALLANT_DE 0 A longueur(combination) {PAR_PAS_DE 1}
			action <- combination[index_combination]
			SI somme + action.prix <= 500 ALORS
				somme <- somme + action.prix
			SINON
				condition <- FAUX
			FIN_SI
		FIN_POUR
		SI condition = VRAI
			AJOUTER combination A resultat
		FIN_SI
	FIN_POUR
	
	RETOURNE resultat
FIN

FONCTION getBestSet(list_combination)
VARIABLES
	index : ENTIER
	index_action : ENTIER
	combination : TABLEAU
	action : Action
	resultat : TABLEAU
	max_profit : REEL
	somme : REEL
	profit : REEL
DEBUT
	max_profit <- None
	POUR index ALLANT_DE 0 A longueur(list_combination) {PAR_PAS_DE 1}$
		combination <- list_combination[index]
		somme <- 0
		profit <- 0
		POUR index_action ALLANT_DE 0 A longueur()
			action <- combination[index_action]
			somme <- somme + action.prix
			profit <- profit + action.profit()
		FIN_POUR
		SI max_profit = None OR profit - somme > max_profit
			max_profit <- profit - somme
		FIN_SI
	FIN_POUR
	RETOURNE max_profit
FIN


CLASSE Action{
	prix : REEL
	benefice : REEL
	id : ENTIER

	PUBLIC FONCTION constructeur(prix,benefice,id){
		this.prix <- prix
		this.benefice <- benefice
		this.id <- id
	}

	PUBLIC FONCTION profit(){
		RETOURNE this.prix * (1 + this.benefice / 100)
	}
}
